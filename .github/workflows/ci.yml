name: Continuous Integration

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:

  llm:
    name: LLM Service
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Call OpenAI API
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_APIKEY }}
        run: |
          curl https://api.openai.com/v1/chat/completions \
            -o response.json \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d '{
              "model": "gpt-4.1-mini",
              "messages": [
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": "给我写一首五言绝句"}
              ]
            }'

      - name: Show response
        run: cat response.json | jq . || cat response.json

  crawler:
    name: Crawler Dry Run
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11", "3.12", "3.13" ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run crawler script
        shell: bash
        run: python crawler.py

  parser:
    name: Parser Dry Run
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ghc: [ "9.6", "9.8" ]
        cabal: [ "3.10", "latest" ]
        include:
          - ghc: "9.2.8"
            cabal: "3.10.1.0"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Haskell ${{ matrix.ghc }} with Cabal ${{ matrix.cabal }}
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - name: Configure the build
        run: |
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build --dry-run

      - name: Build
        run: cabal build all

      - name: Run tests
        run: cabal test all

      - name: Check cabal file
        run: cabal check

      - name: Run parser
        run: cabal run

      - name: Checkout files
        run: |
          pwd
          ls -la
          ls -la docs

  hlint:
    name: HLint
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: .

    steps:
      - uses: actions/checkout@v4

      - name: "Set up HLint"
        uses: haskell-actions/hlint-setup@v2

      - name: "Run HLint"
        uses: haskell-actions/hlint-run@v2
        with:
          path: parser/
          fail-on: warning

  pylint:
    name: Pylint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Analyzing the code with pylint
        run: |
          pylint $(git ls-files '*.py')
